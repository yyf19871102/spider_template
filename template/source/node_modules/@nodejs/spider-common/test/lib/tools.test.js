/**
 * @author yangyufei
 * @date 2019-02-26 18:55:33
 * @desc
 */
const _             = require('lodash');

const helper        = require('../helper');
const tools         = require('../../lib/tools');
const Constant      = require('../../lib/constants');

describe('测试 tools 模块', () => {
    it('测试 threw 方法', async () => {
        await helper(() => {
            try {
                tools.threw(undefined, 'test', {age: 11});
                return;
            } catch (err) {
                return err.code === Constant.ERROR_OBJ.DEFAULT.code && err.data.age === 11;
            }
        })
    });

    it('测试 timeoutRequest 方法', async () => {
        await helper(async () => {
            let reqConf = {
                uri     : 'https://www.baidu.com',
                method  : 'GET',
                timeout : 20000
            };

            await tools.timeoutRequest(reqConf);

            return true;
        });
    });

    it('测试 sortObj 方法', async () => {
        await helper(() => {
            let obj = {b: 2, c: 3, a: 1};

            obj = tools.sortObj(obj);

            return _.keys(obj)[0] === 'a';
        })
    });

    it('测试 spread 方法', async () => {
        await helper(() => {
            let obj = {a: 1, b: '2'};

            return /1\|2\|/g.test(tools.spread(obj));
        });
    });

    it('测试 Progress 类', async () => {
        await helper(() => {
            let progress = new tools.Progress(100, 10, 20, 100, function () {});

            progress.success();
            progress.fail();
            progress.fail();

            return progress.successCount === 11 && progress.failedCount === 22;
        })
    });
});