/**
 * @author yangyufei
 * @date 2019-03-11 11:28:47
 * @desc
 */
const helper        = require('../helper');
const keyManager    = require('../../lib/key_manager');
const ip            = require('./db_manager/getIp')();
const redisManager  = require('../../lib/db_manager/redis_manager');

describe('lib/key_manager.js', () => {
    it('#all', async () => {
        await helper(async () => {
            let config = {};

            if (process.env.SERVER_IP) {
                config = {host: process.env.SERVER_IP, port: 6379, password: 'CMCC10086'};
            } else {
                config = {host: '127.0.0.1', port: 6379, password: '19871102'};
            }

            let logger = {};
            ['trace', 'debug', 'info', 'warn', 'error', 'fatal'].forEach(level => {
                logger[level] = msgOrObj => {};
            });

            let rm = redisManager(config, logger);
            let {redis} = rm;

            let km = keyManager.getInstance(redis, 'testApp');

            await km.clearAllKeys();

            await km.saveKey('key1');
            await km.saveKeyObject({myName: 'key2'});

            if (!await redis.exists(km.namespace) || !await redis.sismember(km.namespace, 'key1') || !await redis.sismember(km.namespace, 'key2')) {
                return false;
            }

            await km.clearAllKeys();

            if (await redis.exists(km.namespace)) return false;

            await rm.close();
            return true;
        });
    });
});