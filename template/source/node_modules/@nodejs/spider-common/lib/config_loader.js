/**
 * @author yangyufei
 * @date 2019-02-26 13:23:26
 * @desc
 */
const fs    = require('fs');
const path  = require('path');
const _     = require('lodash');

const SysCfg= require('./constants');
const {ENV} = SysCfg;

/**
 * 合并两个配置文件中的相同的属性
 * @param targetCfg
 * @param srcCfg
 * @returns {*}
 */
const mergeProperties = (targetCfg, srcCfg) => {
    _.keys(srcCfg).forEach(srcKey => {
        if (!targetCfg.hasOwnProperty(srcKey)) {
            targetCfg[srcKey] = srcCfg[srcKey];
        } else {
            let targetValueType = typeof targetCfg[srcKey];
            let srcValueType = typeof srcCfg[srcKey];

            targetValueType === srcValueType && (targetValueType !== 'object' ? (targetCfg[srcKey] = srcCfg[srcKey]) : mergeProperties(targetCfg[srcKey], srcCfg[srcKey]));
        }
    });

    return targetCfg;
};

/**
 * 加载配置文件夹
 * @param cfgDirPath 配置文件夹位置
 * @param cfg 自定义注入的配置属性
 * @returns {*}
 */
module.exports = (cfgDirPath, cfg) => {
    if (!cfgDirPath) throw new Error(`配置文件夹（cfgDirPath）路径为空！`);

    // 生成system配置
    let config = SysCfg;

    let jsPath = path.join(cfgDirPath, 'system.js');
    let jsonPath = path.join(cfgDirPath, 'system.json');
    fs.existsSync(jsPath) && (config = mergeProperties(config, require(jsPath)));
    fs.existsSync(jsonPath) && (config = mergeProperties(config, require(jsonPath)));

    const _ENV = cfg && cfg.ENV ? cfg.ENV : ENV;

    // 读取config目录下所有配置文件，并合并到system当中
    fs.readdirSync(cfgDirPath).forEach(fileName => {
        let stats = fs.statSync(path.join(cfgDirPath, fileName));

        if (!stats.isDirectory() && new RegExp(`${_ENV}_.*.js$|${_ENV}_.*.json$`).test(fileName)) {
            let key = fileName.replace(`${_ENV}_`, '').replace(/.js$|.json$/g, '');
            let value = require(path.join(cfgDirPath, fileName));
            config.hasOwnProperty(key) ? _.merge(config[key], value) : (config[key] = value);
        }
    });

    return cfg && typeof cfg === 'object' && !Array.isArray(cfg) ? mergeProperties(config, cfg) : config;
};