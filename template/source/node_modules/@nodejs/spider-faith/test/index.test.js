/**
 * @author yangyufei
 * @date 2019-03-13 17:03:09
 * @desc
 */
const moment    = require('moment');
const uuid      = require('uuid/v4');
const fs        = require('fs');
const path      = require('path');
const Promise   = require('bluebird');
const assert    = require('assert');

const failedTasksHandler    = require('../index');

describe('failedTasksHandler测试', () => {
    it('整体测试', async () => {
        let pass = true;

        try {
            let config = {
                jobId       : `${moment().format('YYYYMMDDHHmmss')}@${uuid()}`,
                spiderKey   : 'forTest',
                parentId    : `${moment().format('YYYYMMDDHHmmss')}@${uuid()}`
            };

            let fth = failedTasksHandler.getInstance(config);

            fth.startJob();

            fth.saveTask('phase1@aaaa', {title: 'one'});
            fth.saveTask('phase1@aaaa', {title: 'two'});
            fth.saveTask('phase2@bbb', {title: 'line two'});

            fth.endJob();

            await Promise.delay(500);

            let destPath = fth.destPath;

            if (!fs.existsSync(destPath)) throw new Error(`destPath不存在：${destPath}`);

            let meta = require(path.join(destPath, 'meta.json'));

            if (meta.jobId !== fth.config.jobId
                || meta.parentId !== fth.config.parentId
                || meta.exitType !== 'success'
                || meta.summary['phase1@aaaa'] !== 2
                || meta.summary['phase2@bbb'] !== 1) throw new Error(`meta.json校验不通过！`);

            let p1Path = path.join(destPath, 'phase1@aaaa.fail');
            if (!fs.existsSync(p1Path)) throw new Error(`fail文件不存在：${p1Path}`);

            fs.readFileSync(p1Path, 'utf-8').split('\n').forEach(line => {
                if (line) {
                    let obj = JSON.parse(line);

                    if (!obj.hasOwnProperty('title')) throw new Error(`fail文件校验失败：${line}`);
                }
            });

            let p1List = [], p2List = [];
            await fth.runFailedTask('phase1@aaaa', async task => p1List.push(task));
            await fth.runFailedTask('phase2@bbb', async task => p2List.push(task));

            if (p1List.length !== 2 || p2List.length !== 1 || p2List[0].title !== 'line two') {
                throw new Error(`runFailedTask校验失败`);
            }
        } catch (err) {
            pass = false;
        }

        assert.equal(pass, true);
    });
});