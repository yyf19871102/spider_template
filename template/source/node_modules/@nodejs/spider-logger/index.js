/**
 * @author yangyufei
 * @date 2019-02-28 17:39:45
 * @desc
 */
const _         = require('lodash');
const fs        = require('fs');
const path      = require('path');

const settings  = require('./lib/settings');
const {level}   = settings;

/**
 * 根据accessLevel配置获取可以执行的logger操作
 * @param accessLevel
 * @returns {Set<any>}
 */
const getLevelSet = (accessLevel = 'all') => {
    let levelSet = new Set();

    if (typeof accessLevel === 'string') {
        if (settings.level.hasOwnProperty(accessLevel)) {
            levelSet.add(accessLevel);
        } else if (accessLevel === 'all') {
            _.keys(level).forEach(levelName => levelSet.add(levelName));
        }
    } else if (Array.isArray(accessLevel)) {
        accessLevel.forEach(levelName => {
            settings.level.hasOwnProperty(levelName) && levelSet.add(levelName);
        })
    } else if (typeof accessLevel === 'object' && accessLevel) {
        settings.getLevelsByRange(accessLevel.min, accessLevel.max).forEach(level => {
            levelSet.add(level);
        });
    }

    return levelSet;
};

exports.level = level;

exports.getLogger = (config) => {
    const logger = {};

    // 加载默认实现logger
    const loggerList = [];
    _.keys(config).forEach(implName => {
        let cfg = config[implName];

        let implPath = path.join(__dirname, 'lib', `impl_${implName}.js`);
        if (cfg && (cfg.enabled === true || !cfg.hasOwnProperty('enabled')) && fs.existsSync(implPath)) {
            let logger = {
                impl : require(implPath)(cfg),
                filter: getLevelSet(cfg.level)
            };

            loggerList.push(logger);
        }
    });

    _.keys(level).forEach(levelName => {
        logger[levelName] = msgOrObj => {
            loggerList.forEach(logger => {
                logger.filter.has(levelName) && logger.impl[levelName](msgOrObj);
            })
        }
    });

    return logger;
};