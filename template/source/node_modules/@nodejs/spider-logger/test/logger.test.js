/**
 * @author yangyufei
 * @date 2019-02-28 18:52:40
 * @desc
 */
const path      = require('path');
const fs        = require('fs');
const uuid      = require('uuid/v4');
const os        = require('os');

const helper    = require('./helper');
const logHandler= require('../index');

describe('测试logger', () => {
    it('测试logger的level输出', async () => {
        await helper(() => {
            let cacheStr = '';
            console.log = msg => {
                cacheStr += msg;
            };

            let logger = logHandler.getLogger({console: {level: 'all'}});
            logger.info('step1');
            logger.fatal('step2');
            try {
                logger.bad('step3');
                return false;
            } catch (err) {}


            logger = logHandler.getLogger({console: {level: {min: 'info', max: 'error'}}});
            logger.trace('step4');
            logger.warn('step5');

            logger = logHandler.getLogger({console: {level: ['trace']}});
            logger.trace('step6');
            logger.warn('step7');


            return /.*step1.*step2.*step5.*step6/g.test(cacheStr);
        });
    });

    it('测试 fileLogger', async () => {
        await helper(() => {
            let logger = logHandler.getLogger({file: {}});
            let info = uuid();
            logger.info(info);

            let has = false;
            let logPath = path.join(os.homedir(), '.spider', 'logs');
            fs.readdirSync(logPath).forEach(fileName => {
                if (fs.statSync(path.join(logPath, fileName)).isFile()) {
                    let str = fs.readFileSync(path.join(logPath, fileName), 'utf-8');
                    new RegExp(info).test(str) && (has = true);
                }
            });
            return has;
        });
    });
});