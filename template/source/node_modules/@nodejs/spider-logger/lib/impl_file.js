/**
 * @author yangyufei
 * @date 2019-02-21 20:21:53
 * @desc
 */
const _         = require('lodash');
const fs        = require('fs');
const path      = require('path');
const moment    = require('moment');
const mkdirp    = require('mkdirp');
const uuid      = require('uuid/v4');
const os        = require('os');

const settings  = require('./settings');
const {level}   = settings;

/**
 * 生成文件名称
 * @returns {string}
 */
const makeFileName = (cfg) => {
    let fileName = moment().format('YYYYMMDD');

    let hours = new Date().getHours();
    hours < 10 && (hours = '0' + hours);

    let minutes = new Date().getMinutes();
    minutes < 10 && (minutes = '0' + minutes);

    let seconds = new Date().getSeconds();
    seconds < 10 && (seconds = '0' + seconds);

    switch(cfg.timeInterval) {
        case 'H' : fileName += `${hours}0000`; break;
        case 'm' : fileName += `${hours}${minutes}00`; break;
        case 's' : fileName += `${hours}${minutes}${seconds}`; break;
        default: fileName += '000000';
    }

    return `${cfg.appName || 'app'}-${fileName}.log`;
};

/**
 * 获取本机IP
 * @returns {string}
 */
const getLocalIP = () => {
    const interfaces = os.networkInterfaces();

    let IPAdress = '';
    for(let devName in interfaces){
        let iface = interfaces[devName];

        for(let i=0; i < iface.length; i++){
            let alias = iface[i];
            alias.family === 'IPv4' && alias.address !== '127.0.0.1' && !alias.internal && (IPAdress = alias.address);
        }
    }

    return IPAdress;
};

const makeLogContent = (logLevel, content, cfg) => {
    (content === null || content === undefined) && (content = '');

    let schema = {
        logId       : uuid(), // 日志ID
        roomId      : cfg.roomId || '', // 机房标识
        serverIP    : cfg.serverIP || getLocalIP(), // 服务器IP
        spiderType  : cfg.spiderType || '', // 爬虫/应用类型
        spiderId    : cfg.appName || 'app', // 爬虫/应用ID
        workspace   : cfg.workspace || '', // 部署位置
        logLevel, // 日志级别
        dateTime    : new Date().getTime(), // 时间戳
        content     : content.toString().replace(/\r/g, '&#114;').replace(/\n/g, '&#110;').replace(/\|/g, '&#124;'), // 日志内容
        extension1  : cfg.ext1 || '', // 扩展字段1
        extension2  : cfg.ext2 || '', // 扩展字段2
    };

    let result = '';
    _.keys(schema).forEach(propName => {
        result += schema[propName] + '|';
    });
    return result += '#\r\n';
};

module.exports = cfg => {
    !cfg.path && (cfg.path = path.join(os.homedir(), '.spider-logs'));

    const logger = {};

    _.keys(level).forEach(levelName => {
        logger[levelName] = msgOrObj => {

            let msg = makeLogContent(level[levelName].name, msgOrObj, cfg);

            !fs.existsSync(cfg.path) && mkdirp.sync(cfg.path);

            fs.appendFileSync(path.join(cfg.path, makeFileName(cfg)), msg);
        }
    });

    return logger;
};